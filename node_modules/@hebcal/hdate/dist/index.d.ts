/**
 * Returns true if the Gregorian year is a leap year
 * @param year Gregorian year
 */
declare function isGregLeapYear(year: number): boolean;
/**
 * Number of days in the Gregorian month for given year
 * @param month Gregorian month (1=January, 12=December)
 * @param year Gregorian year
 */
declare function daysInGregMonth(month: number, year: number): number;
/**
 * Returns true if the object is a Javascript Date
 */
declare function isDate(obj: any): boolean;
/**
 * Converts Gregorian date to absolute R.D. (Rata Die) days
 * @param date Gregorian date
 */
declare function greg2abs(date: Date): number;
/**
 * Converts from Rata Die (R.D. number) to Gregorian date.
 * See the footnote on page 384 of ``Calendrical Calculations, Part II:
 * Three Historical Calendars'' by E. M. Reingold,  N. Dershowitz, and S. M.
 * Clamen, Software--Practice and Experience, Volume 23, Number 4
 * (April, 1993), pages 383-404 for an explanation.
 * @param abs - R.D. number of days
 */
declare function abs2greg(abs: number): Date;

/**
 * Gregorian date helper functions
 */
declare namespace greg {
    function abs2greg(abs: number): Date;
    function daysInMonth(month: number, year: number): number;
    function greg2abs(date: Date): number;
    function isDate(obj: any): boolean;
    function isLeapYear(year: number): boolean;
}

/**
 * Hebrew months of the year (NISAN=1, TISHREI=7)
 * @readonly
 * @enum {number}
 */
declare const months: {
    /** Nissan / ניסן */
    readonly NISAN: 1;
    /** Iyyar / אייר */
    readonly IYYAR: 2;
    /** Sivan / סיון */
    readonly SIVAN: 3;
    /** Tamuz (sometimes Tammuz) / תמוז */
    readonly TAMUZ: 4;
    /** Av / אב */
    readonly AV: 5;
    /** Elul / אלול */
    readonly ELUL: 6;
    /** Tishrei / תִּשְׁרֵי */
    readonly TISHREI: 7;
    /** Cheshvan / חשון */
    readonly CHESHVAN: 8;
    /** Kislev / כסלו */
    readonly KISLEV: 9;
    /** Tevet / טבת */
    readonly TEVET: 10;
    /** Sh'vat / שבט */
    readonly SHVAT: 11;
    /** Adar or Adar Rishon / אדר */
    readonly ADAR_I: 12;
    /** Adar Sheini (only on leap years) / אדר ב׳ */
    readonly ADAR_II: 13;
};
/**
 * Converts Hebrew date to R.D. (Rata Die) fixed days.
 * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian
 * Calendar.
 * @param year Hebrew year
 * @param month Hebrew month
 * @param day Hebrew date (1-30)
 */
declare function hebrew2abs(year: number, month: number, day: number): number;
/**
 * Converts Hebrew date to R.D. (Rata Die) fixed days.
 * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian
 * Calendar.
 */
declare function hd2abs(hdate: SimpleHebrewDate): number;
type SimpleHebrewDate = {
    /** Hebrew year */
    yy: number;
    /** Hebrew month of year (1=NISAN, 7=TISHREI) */
    mm: number;
    /** Day of month (1-30) */
    dd: number;
};
/**
 * Converts absolute R.D. days to Hebrew date
 * @param abs absolute R.D. days
 */
declare function abs2hebrew(abs: number): SimpleHebrewDate;
/**
 * Returns true if Hebrew year is a leap year
 * @param year Hebrew year
 */
declare function isLeapYear(year: number): boolean;
/**
 * Number of months in this Hebrew year (either 12 or 13 depending on leap year)
 * @param year Hebrew year
 */
declare function monthsInYear(year: number): number;
/**
 * Number of days in Hebrew month in a given year (29 or 30)
 * @param month Hebrew month (e.g. months.TISHREI)
 * @param year Hebrew year
 */
declare function daysInMonth(month: number, year: number): number;
/**
 * Returns a transliterated string name of Hebrew month in year,
 * for example 'Elul' or 'Cheshvan'.
 * @param month Hebrew month (e.g. months.TISHREI)
 * @param year Hebrew year
 */
declare function getMonthName(month: number, year: number): string;
/**
 * Days from sunday prior to start of Hebrew calendar to mean
 * conjunction of Tishrei in Hebrew YEAR
 * @param year Hebrew year
 */
declare function elapsedDays(year: number): number;
/**
 * Number of days in the hebrew YEAR.
 * A common Hebrew calendar year can have a length of 353, 354 or 355 days
 * A leap Hebrew calendar year can have a length of 383, 384 or 385 days
 * @param year Hebrew year
 */
declare function daysInYear(year: number): number;
/**
 * true if Cheshvan is long in Hebrew year
 * @param year Hebrew year
 */
declare function longCheshvan(year: number): boolean;
/**
 * true if Kislev is short in Hebrew year
 * @param year Hebrew year
 */
declare function shortKislev(year: number): boolean;
/**
 * Converts Hebrew month string name to numeric
 * @param monthName monthName
 */
declare function monthFromName(monthName: string): number;

type AnniversaryDate = Date | SimpleHebrewDate | number;
/**
 * Calculates yahrzeit.
 * `hyear` must be after original `date` of death.
 * Returns `undefined` when requested year preceeds or is same as original year.
 *
 * Hebcal uses the algorithm defined in "Calendrical Calculations"
 * by Edward M. Reingold and Nachum Dershowitz.
 *
 * The customary anniversary date of a death is more complicated and depends
 * also on the character of the year in which the first anniversary occurs.
 * There are several cases:
 *
 * * If the date of death is Marcheshvan 30, the anniversary in general depends
 *   on the first anniversary; if that first anniversary was not Marcheshvan 30,
 *   use the day before Kislev 1.
 * * If the date of death is Kislev 30, the anniversary in general again depends
 *   on the first anniversary — if that was not Kislev 30, use the day before
 *   Tevet 1.
 * * If the date of death is Adar II, the anniversary is the same day in the
 *   last month of the Hebrew year (Adar or Adar II).
 * * If the date of death is Adar I 30, the anniversary in a Hebrew year that
 *   is not a leap year (in which Adar only has 29 days) is the last day in
 *   Shevat.
 * * In all other cases, use the normal (that is, same month number) anniversary
 *   of the date of death. [Calendrical Calculations p. 113]
 * @example
 * import {getYahrzeit} from '@hebcal/hdate';
 * const dt = new Date(2014, 2, 2); // '2014-03-02' == '30 Adar I 5774'
 * const anniversary = getYahrzeit(5780, dt); // '2/25/2020' == '30 Sh\'vat 5780'
 * @param hyear Hebrew year
 * @param date Gregorian or Hebrew date of death
 * @returns anniversary occurring in `hyear`
 */
declare function getYahrzeit(hyear: number, date: AnniversaryDate): Date | undefined;
declare function getYahrzeitHD(hyear: number, date: AnniversaryDate): SimpleHebrewDate | undefined;
/**
 * Calculates a birthday or anniversary (non-yahrzeit).
 * `hyear` must be after original `date` of anniversary.
 * Returns `undefined` when requested year preceeds or is same as original year.
 *
 * Hebcal uses the algorithm defined in "Calendrical Calculations"
 * by Edward M. Reingold and Nachum Dershowitz.
 *
 * The birthday of someone born in Adar of an ordinary year or Adar II of
 * a leap year is also always in the last month of the year, be that Adar
 * or Adar II. The birthday in an ordinary year of someone born during the
 * first 29 days of Adar I in a leap year is on the corresponding day of Adar;
 * in a leap year, the birthday occurs in Adar I, as expected.
 *
 * Someone born on the thirtieth day of Marcheshvan, Kislev, or Adar I
 * has his birthday postponed until the first of the following month in
 * years where that day does not occur. [Calendrical Calculations p. 111]
 * @example
 * import {getBirthdayOrAnniversary} from '@hebcal/hdate';
 * const dt = new Date(2014, 2, 2); // '2014-03-02' == '30 Adar I 5774'
 * const anniversary = getBirthdayOrAnniversary(5780, dt); // '3/26/2020' == '1 Nisan 5780'
 * @param hyear Hebrew year
 * @param date Gregorian or Hebrew date of event
 * @returns anniversary occurring in `hyear`
 */
declare function getBirthdayOrAnniversary(hyear: number, date: AnniversaryDate): Date | undefined;
declare function getBirthdayHD(hyear: number, date: AnniversaryDate): SimpleHebrewDate | undefined;

/**
 * Converts a numerical value to a string of Hebrew letters.
 *
 * When specifying years of the Hebrew calendar in the present millennium,
 * we omit the thousands (which is presently 5 [ה]).
 * @example
 * gematriya(5774) // 'תשע״ד' - cropped to 774
 * gematriya(25) // 'כ״ה'
 * gematriya(60) // 'ס׳'
 * gematriya(3761) // 'ג׳תשס״א'
 * gematriya(1123) // 'א׳קכ״ג'
 */
declare function gematriya(num: number | string): string;
/**
 * Converts a string of Hebrew letters to a numerical value.
 *
 * Only considers the value of Hebrew letters `א` through `ת`.
 * Ignores final Hebrew letters such as `ך` (kaf sofit) or `ם` (mem sofit)
 * and vowels (nekudot).
 */
declare function gematriyaStrToNum(str: string): number;

/**
 * Language for counting the Omer can be English or Hebrew.
 * Lang for the Sefira can be English, Hebrew, or Hebrew in Sephardic transliteration.
 */
type OmerLang = 'en' | 'he' | 'translit';
/**
 * Returns the sefira. For example, on day 8
 *  חֶֽסֶד שֶׁבִּגְבוּרָה
 *  Chesed shebiGevurah
 *  Lovingkindness within Might
 * @param omerDay the day of the omer, 1-49 inclusive
 * @param lang `en` (English), `he` (Hebrew with nikud), or `translit` (Hebrew in Sephardic transliteration)
 * @returns a string such as `Lovingkindness within Might` or `חֶֽסֶד שֶׁבִּגְבוּרָה`
 */
declare function omerSefira(omerDay: number, lang: OmerLang): string;
/**
 * Returns a sentence with that evening's omer count
 * @param omerDay the day of the omer, 1-49 inclusive
 * @param lang `en` (English), `he` (Hebrew with nikud)
 * @returns a string such as `Today is 10 days, which is 1 week and 3 days of the Omer`
 *  or `הַיוֹם עֲשָׂרָה יָמִים, שְׁהֵם שָׁבוּעַ אֶחָד וְשְׁלוֹשָׁה יָמִים לָעוֹמֶר`
 */
declare function omerTodayIs(omerDay: number, lang: OmerLang): string;
/**
 * Returns an emoji number symbol with a circle, for example `㊲`
 *  from the “Enclosed CJK Letters and Months” block of the Unicode standard
 * @param omerDay the day of the omer, 1-49 inclusive
 * @returns a single Unicode character from `①` through `㊾`
 */
declare function omerEmoji(omerDay: number): string;

/**
 * Represents a molad, the moment when the new moon is "born"
 */
type Molad = {
    /** Hebrew year */
    readonly year: number;
    /** Hebrew month */
    readonly month: number;
    /** Day of Week (0=Sunday, 6=Saturday) */
    readonly dayOfWeek: number;
    /** hour of day (0-23) */
    readonly hour: number;
    /** minutes past hour (0-59) */
    readonly minutes: number;
    /** parts of a minute (0-17) */
    readonly chalakim: number;
};
/**
 * Calculates the molad for a Hebrew month
 */
declare function molad(year: number, month: number): Molad;

/**
 * Formats a number with leading zeros so the resulting string is 4 digits long.
 * Similar to `string.padStart(4, '0')` but will also format
 * negative numbers similar to how the JavaScript date formats
 * negative year numbers (e.g. `-37` is formatted as `-000037`).
 */
declare function pad4(num: number): string;
/**
 * Formats a number with leading zeros so the resulting string is 2 digits long.
 * Similar to `string.padStart(2, '0')`.
 */
declare function pad2(num: number): string;

/**
 * Returns a string similar to `Date.toISOString()` but in the
 * timezone `tzid`. Contrary to the typical meaning of `Z` at the end
 * of the string, this is not actually a UTC date.
 */
declare function getPseudoISO(tzid: string, date: Date): string;
/**
 * Returns number of minutes `tzid` is offset from UTC on date `date`.
 */
declare function getTimezoneOffset(tzid: string, date: Date): number;
/**
 * Returns YYYY-MM-DD in the local timezone
 */
declare function isoDateString(dt: Date): string;

interface Headers {
    'content-type'?: string;
    'plural-forms'?: string;
}
interface StringArrayMap {
    [key: string]: string[];
}
interface LocaleData {
    headers: Headers;
    contexts: {
        [key: string]: StringArrayMap;
    };
}
/**
 * A locale in Hebcal is used for translations/transliterations of
 * holidays. `@hebcal/hdate` supports four locales by default
 * * `en` - default, Sephardic transliterations (e.g. "Shabbat")
 * * `ashkenazi` - Ashkenazi transliterations (e.g. "Shabbos")
 * * `he` - Hebrew (e.g. "שַׁבָּת")
 * * `he-x-NoNikud` - Hebrew without nikud (e.g. "שבת")
 */
declare class Locale {
    /**
     * Returns translation only if `locale` offers a non-empty translation for `id`.
     * Otherwise, returns `undefined`.
     * @param id Message ID to translate
     * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale.
     */
    static lookupTranslation(id: string, locale?: string): string | undefined;
    /**
     * By default, if no translation was found, returns `id`.
     * @param id Message ID to translate
     * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale.
     */
    static gettext(id: string, locale?: string): string;
    /**
     * Register locale translations.
     * @param locale Locale name (i.e.: `'he'`, `'fr'`)
     * @param data parsed data from a `.po` file.
     */
    static addLocale(locale: string, data: LocaleData): void;
    /**
     * Adds a translation to `locale`, replacing any previous translation.
     * @param locale Locale name (i.e: `'he'`, `'fr'`).
     * @param id Message ID to translate
     * @param translation Translation text
     */
    static addTranslation(locale: string, id: string, translation: string | string[]): void;
    /**
     * Adds multiple translations to `locale`, replacing any previous translations.
     * @param locale Locale name (i.e: `'he'`, `'fr'`).
     * @param data parsed data from a `.po` file.
     */
    static addTranslations(locale: string, data: LocaleData): void;
    /**
     * Activates a locale. Throws an error if the locale has not been previously added.
     * After setting the locale to be used, all strings marked for translations
     * will be represented by the corresponding translation in the specified locale.
     * @param locale Locale name (i.e: `'he'`, `'fr'`)
     */
    static useLocale(locale: string): StringArrayMap;
    /**
     * Returns the name of the active locale (i.e. 'he', 'ashkenazi', 'fr')
     */
    static getLocaleName(): string;
    /**
     * Returns the names of registered locales
     */
    static getLocaleNames(): string[];
    /**
     * Renders a number in ordinal, such as 1st, 2nd or 3rd
     * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale.
     */
    static ordinal(n: number, locale?: string): string;
    /**
     * Removes nekudot from Hebrew string
     */
    static hebrewStripNikkud(str: string): string;
}

/**
 * A `HDate` represents a Hebrew calendar date.
 *
 * An instance of this class encapsulates a date in the Hebrew calendar system.
 * It consists of a year, month, and day, without any associated time or location data.
 * The Hebrew calendar is a lunisolar calendar, meaning it is based on both lunar and solar cycles.
 *
 * A Hebrew date internally stores three numbers:
 * - year: The Hebrew year (1-9999). Counted from the traditional Hebrew date of creation (3761 BCE in the Gregorian calendar)
 * - month: The Hebrew month (1-13). Month 1 is Nisan, month 7 is Tishrei. There are 12 months in a regular year and 13 months in a leap year.
 * - day: The day of the month (1-30)
 *
 * This class uses Rata Die to convert between the Hebrew and Gregorian calendars.
 *
 * To calculate times of day, use `Zmanim` class from `@hebcal/core`
 * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}
 * @see {@link https://hebcal.github.io/api/core/classes/Zmanim.html | Zmanim}
 */
declare class HDate {
    /** Hebrew year, 1-9999 */
    yy: number;
    /** Hebrew month of year (1=NISAN, 7=TISHREI) */
    mm: number;
    /** Hebrew day within the month (1-30) */
    dd: number;
    /** absolute Rata Die (R.D.) days */
    rd?: number;
    /**
     * Create a Hebrew date. There are 3 basic forms for the `HDate()` constructor.
     *
     * 1. No parameters - represents the current Hebrew date at time of instantiation
     * 2. One parameter
     *    * `Date` - represents the Hebrew date corresponding to the Gregorian date using
     *       local time. Hours, minutes, seconds and milliseconds are ignored.
     *    * `HDate` - clones a copy of the given Hebrew date
     *    * `number` - Converts absolute R.D. days to Hebrew date.
     *       R.D. 1 == the imaginary date January 1, 1 (Gregorian)
     * 3. Three parameters: Hebrew day, Hebrew month, Hebrew year. Hebrew day should
     *    be a number between 1-30, Hebrew month can be a number or string, and
     *    Hebrew year is always a number.
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     *
     * const hd1 = new HDate();
     * const hd2 = new HDate(new Date(2008, 10, 13));
     * const hd3 = new HDate(15, 'Cheshvan', 5769);
     * const hd4 = new HDate(15, months.CHESHVAN, 5769);
     * const hd5 = new HDate(733359); // ==> 15 Cheshvan 5769
     * const monthName = 'אייר';
     * const hd6 = new HDate(5, monthName, 5773);
     * @param [day] - Day of month (1-30) if a `number`.
     *   If a `Date` is specified, represents the Hebrew date corresponding to the
     *   Gregorian date using local time.
     *   If an `HDate` is specified, clones a copy of the given Hebrew date.
     * @param [month] - Hebrew month of year (1=NISAN, 7=TISHREI)
     * @param [year] - Hebrew year
     */
    constructor(day?: number | Date | HDate | SimpleHebrewDate | undefined, month?: number | string, year?: number);
    /**
     * Returns the Hebrew year of this Hebrew date
     * @returns an integer >= 1
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getFullYear(); // 5769
     */
    getFullYear(): number;
    /**
     * Returns `true` if this Hebrew date occurs during a Hebrew leap year
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.isLeapYear(); // false
     */
    isLeapYear(): boolean;
    /**
     * Returns the Hebrew month (1=NISAN, 7=TISHREI) of this Hebrew date
     * @returns an integer 1-13
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getMonth(); // 8
     */
    getMonth(): number;
    /**
     * The Tishrei-based month of this Hebrew date. 1 is Tishrei, 7 is Nisan, 13 is Elul in a leap year
     * @returns an integer 1-13
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getTishreiMonth(); // 2
     */
    getTishreiMonth(): number;
    /**
     * Number of days in the month of this Hebrew date (29 or 30)
     * @returns an integer 29-30
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.daysInMonth(); // 29
     */
    daysInMonth(): number;
    /**
     * Gets the day within the month (1-30)
     * @returns an integer 1-30
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getDate(); // 15
     */
    getDate(): number;
    /**
     * Returns the day of the week for this Hebrew date,
     * where 0 represents Sunday, 1 represents Monday, 6 represents Saturday.
     *
     * For the day of the month, see `getDate()`
     * @returns an integer 0-6
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getDate(); // 4
     */
    getDay(): number;
    /**
     * Converts this Hebrew date to the corresponding Gregorian date.
     * Note that this function returns the daytime portion of the date.
     * For example, the 15th of Cheshvan 5769 began at sundown on
     * 12 November 2008 and continues through 13 November 2008. This
     * function would return only the date 13 November 2008.
     * @example
     * const hd = new HDate(15, 'Cheshvan', 5769);
     * hd.greg(); // 13 November 2008
     */
    greg(): Date;
    /**
     * Converts from Hebrew date representation to R.D. (Rata Die) fixed days.
     * R.D. 1 is the imaginary date Monday, January 1, 1 (Gregorian).
     * Note also that R.D. = Julian Date − 1,721,424.5
     * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}
     * @example
     * const hd = new HDate(15, 'Cheshvan', 5769);
     * hd.abs(); // 733359
     */
    abs(): number;
    /**
     * Converts Hebrew date to R.D. (Rata Die) fixed days.
     * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian
     * Calendar.
     * @param year Hebrew year
     * @param month Hebrew month (1=NISAN, 7=TISHREI)
     * @param day Hebrew date (1-30)
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * HDate.hebrew2abs(5769, months.CHESHVAN, 15); // 733359
     */
    static hebrew2abs(year: number, month: number, day: number): number;
    /**
     * Returns a transliterated Hebrew month name, e.g. `'Elul'` or `'Cheshvan'`.
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.getMonthName(); // 'Cheshvan'
     */
    getMonthName(): string;
    /**
     * Renders this Hebrew date as a translated or transliterated string,
     * including ordinal e.g. `'15th of Cheshvan, 5769'`.
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     *
     * const hd = new HDate(15, months.CHESHVAN, 5769);
     * console.log(hd.render('en')); // '15th of Cheshvan, 5769'
     * console.log(hd.render('he')); // '15 חֶשְׁוָן, 5769'
     * console.log(hd.render('en', false)); // '15th of Cheshvan'
     * console.log(hd.render('he', false)); // '15 חֶשְׁוָן'
     * @param [locale] Optional locale name (defaults to active locale).
     * @param [showYear=true] Display year (defaults to true).
     * @see {@link Locale}
     */
    render(locale?: string, showYear?: boolean): string;
    /**
     * Renders this Hebrew date in Hebrew gematriya, regardless of locale.
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * const hd = new HDate(15, months.CHESHVAN, 5769);
     * hd.renderGematriya(); // 'ט״ו חֶשְׁוָן תשס״ט'
     * hd.renderGematriya(true); // 'ט״ו חשון תשס״ט'
     */
    renderGematriya(suppressNikud?: boolean): string;
    /**
     * Returns an `HDate` corresponding to the specified day of week
     * **before** this Hebrew date
     * @example
     * new HDate(new Date('Wednesday February 19, 2014')).before(6).greg() // Sat Feb 15 2014
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    before(dayOfWeek: number): HDate;
    /**
     * Returns an `HDate` corresponding to the specified day of week
     * **on or before** this Hebrew date
     * @example
     * new HDate(new Date('Wednesday February 19, 2014')).onOrBefore(6).greg() // Sat Feb 15 2014
     * new HDate(new Date('Saturday February 22, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014
     * new HDate(new Date('Sunday February 23, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    onOrBefore(dayOfWeek: number): HDate;
    /**
     * Returns an `HDate` corresponding to the specified day of week
     * **nearest** to this Hebrew date
     * @example
     * new HDate(new Date('Wednesday February 19, 2014')).nearest(6).greg() // Sat Feb 22 2014
     * new HDate(new Date('Tuesday February 18, 2014')).nearest(6).greg() // Sat Feb 15 2014
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    nearest(dayOfWeek: number): HDate;
    /**
     * Returns an `HDate` corresponding to the specified day of week
     * **on or after** this Hebrew date
     * @example
     * new HDate(new Date('Wednesday February 19, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014
     * new HDate(new Date('Saturday February 22, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014
     * new HDate(new Date('Sunday February 23, 2014')).onOrAfter(6).greg() // Sat Mar 01 2014
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    onOrAfter(dayOfWeek: number): HDate;
    /**
     * Returns an `HDate` corresponding to the specified day of week
     * **after** this Hebrew date
     * @example
     * new HDate(new Date('Wednesday February 19, 2014')).after(6).greg() // Sat Feb 22 2014
     * new HDate(new Date('Saturday February 22, 2014')).after(6).greg() // Sat Mar 01 2014
     * new HDate(new Date('Sunday February 23, 2014')).after(6).greg() // Sat Mar 01 2014
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    after(dayOfWeek: number): HDate;
    /**
     * Returns the next Hebrew date
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.next(); // '16 Cheshvan 5769'
     */
    next(): HDate;
    /**
     * Returns the previous Hebrew date
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.prev(); // '14 Cheshvan 5769'
     */
    prev(): HDate;
    /**
     * Returns a cloned `HDate` object with a specified amount of time added
     *
     * Units are case insensitive, and support plural and short forms.
     * Note, short forms are case sensitive.
     *
     * | Unit | Shorthand | Description
     * | --- | --- | --- |
     * | `day` | `d` | days |
     * | `week` | `w` | weeks |
     * | `month` | `M` | months |
     * | `year` | `y` | years |
     */
    add(amount: number | string, units?: string): HDate;
    /**
     * Returns a cloned `HDate` object with a specified amount of time subracted
     *
     * Units are case insensitive, and support plural and short forms.
     * Note, short forms are case sensitive.
     *
     * | Unit | Shorthand | Description
     * | --- | --- | --- |
     * | `day` | `d` | days |
     * | `week` | `w` | weeks |
     * | `month` | `M` | months |
     * | `year` | `y` | years |
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     *
     * const hd1 = new HDate(15, months.CHESHVAN, 5769);
     * const hd2 = hd1.add(1, 'weeks'); // 7 Kislev 5769
     * const hd3 = hd1.add(-3, 'M'); // 30 Av 5768
     */
    subtract(amount: number, units?: string): HDate;
    /**
     * Returns the difference in days between the two given HDates.
     *
     * The result is positive if `this` date is comes chronologically
     * after the `other` date, and negative
     * if the order of the two dates is reversed.
     *
     * The result is zero if the two dates are identical.
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     *
     * const hd1 = new HDate(25, months.KISLEV, 5770);
     * const hd2 = new HDate(15, months.CHESHVAN, 5769);
     * const days = hd1.deltaDays(hd2); // 394
     * @param other Hebrew date to compare
     */
    deltaDays(other: HDate): number;
    /**
     * Compares this Hebrew date to another date, returning `true` if the dates match.
     * @param other Hebrew date to compare
     * @example
     * const hd1 = new HDate(new Date(2008, 10, 13));
     * const hd2 = new HDate(15, 'Cheshvan', 5769);
     * hd1.isSameDate(hd2); // true
     */
    isSameDate(other: HDate): boolean;
    /**
     * Returns a string representation of this Hebrew date using English transliterations
     * @example
     * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769
     * hd.toString(); // '15 Cheshvan 5769'
     */
    toString(): string;
    /**
     * Returns true if Hebrew year is a leap year
     * @param year Hebrew year
     * @example
     * HDate.isLeapYear(5783); // false
     * HDate.isLeapYear(5784); // true
     */
    static isLeapYear(year: number): boolean;
    /**
     * Number of months in this Hebrew year (either 12 or 13 depending on leap year)
     * @param year Hebrew year
     * @example
     * HDate.monthsInYear(5783); // 12
     * HDate.monthsInYear(5784); // 13
     */
    static monthsInYear(year: number): number;
    /**
     * Number of days in Hebrew month in a given year (29 or 30)
     * @param month Hebrew month (e.g. months.TISHREI)
     * @param year Hebrew year
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * HDate.daysInMonth(months.CHESHVAN, 5769); // 29
     */
    static daysInMonth(month: number, year: number): number;
    /**
     * Returns a transliterated string name of Hebrew month in year,
     * for example 'Elul' or 'Cheshvan'.
     * @param month Hebrew month (e.g. months.TISHREI)
     * @param year Hebrew year
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * HDate.getMonthName(months.CHESHVAN, 5769); // 'Cheshvan'
     */
    static getMonthName(month: number, year: number): string;
    /**
     * Returns the Hebrew month number (NISAN=1, TISHREI=7)
     * @param month A number, or Hebrew month name string
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * HDate.monthNum(months.CHESHVAN); // 8
     * HDate.monthNum('Cheshvan'); // 8
     * HDate.monthNum('חשון'); // 8
     */
    static monthNum(month: number | string): number;
    /**
     * Number of days in the Hebrew year.
     * Regular years can have 353, 354, or 355 days.
     * Leap years can have 383, 384, or 385 days.
     * @param year Hebrew year
     * @example
     * HDate.daysInYear(5783); // 355
     * HDate.daysInYear(5784); // 383
     */
    static daysInYear(year: number): number;
    /**
     * true if Cheshvan is long in Hebrew year
     * @param year Hebrew year
     * @example
     * HDate.longCheshvan(5783); // true
     * HDate.longCheshvan(5784); // false
     */
    static longCheshvan(year: number): boolean;
    /**
     * true if Kislev is short in Hebrew year
     * @param year Hebrew year
     * @example
     * HDate.shortKislev(5783); // false
     * HDate.shortKislev(5784); // true
     */
    static shortKislev(year: number): boolean;
    /**
     * Converts Hebrew month string name to numeric
     * @example
     * import {HDate, months} from '@hebcal/hdate';
     * HDate.monthFromName(months.CHESHVAN); // 8
     * HDate.monthFromName('Cheshvan'); // 8
     * HDate.monthFromName('חשון'); // 8
     */
    static monthFromName(monthName: string | number): number;
    /**
     * Convenience function for determining the R.D. date
     * near a specified R.D. date, corresponding to the specified day of week.
     *
     * Note: Applying this function to d+6 gives us the `dayOfWeek` on or after an
     * absolute day d. Similarly, applying it to d+3 gives the `dayOfWeek` nearest to
     * absolute date d, applying it to d-1 gives the `dayOfWeek` previous to absolute
     * date d, and applying it to d+7 gives the `dayOfWeek` following absolute date d.
     * @param dayOfWeek day of week: Sunday=0, Saturday=6
     */
    static dayOnOrBefore(dayOfWeek: number, absdate: number): number;
    /**
     * Tests if the object is an instance of `HDate`
     * @example
     * HDate.isHDate(new HDate()); // true
     * HDate.isHDate(new Date()); // false
     * HDate.isHDate(null); // false
     * HDate.isHDate(12345); // false
     * HDate.isHDate('15 Cheshvan 5769'); // false
     */
    static isHDate(obj: any): boolean;
    /**
     * Construct a new instance of `HDate` from a Gematriya-formatted string
     * @example
     * HDate.fromGematriyaString('כ״ז בְּתַמּוּז תשפ״ג') // 27 Tamuz 5783
     * HDate.fromGematriyaString('כ׳ סיון תש״ד') // 20 Sivan 5704
     * HDate.fromGematriyaString('ה׳ אִיָיר תש״ח') // 5 Iyyar 5708
     */
    static fromGematriyaString(str: string, currentThousands?: number): HDate;
}

export { type AnniversaryDate, HDate, type Headers, Locale, type LocaleData, type Molad, type OmerLang, type SimpleHebrewDate, type StringArrayMap, abs2greg, abs2hebrew, daysInGregMonth, daysInMonth, daysInYear, elapsedDays, gematriya, gematriyaStrToNum, getBirthdayHD, getBirthdayOrAnniversary, getMonthName, getPseudoISO, getTimezoneOffset, getYahrzeit, getYahrzeitHD, greg, greg2abs, hd2abs, hebrew2abs, isDate, isGregLeapYear, isLeapYear, isoDateString, longCheshvan, molad, monthFromName, months, monthsInYear, omerEmoji, omerSefira, omerTodayIs, pad2, pad4, shortKislev };
